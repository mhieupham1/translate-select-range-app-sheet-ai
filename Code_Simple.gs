/**
 * Google Apps Script for Google Sheets Translation Tool - Phi√™n b·∫£n ƒë∆°n gi·∫£n
 * Kh√¥ng s·ª≠ d·ª•ng ui.alert() ƒë·ªÉ tr√°nh l·ªói
 */

// Configuration
const GEMINI_API_KEY = 'YOUR_GEMINI_API_KEY_HERE';
const OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY_HERE';
const AVAILABLE_MODELS = {
  'gemini-2.0-flash-lite': {
    name: 'Gemini 2.0 Flash Lite',
    url: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent',
    cost: 'Cao',
    quality: 'T·ªët nh·∫•t',
    provider: 'Google'
  },
  'gemma-3-4b-it': {
    name: 'Gemma 3 4B IT',
    url: 'https://generativelanguage.googleapis.com/v1beta/models/gemma-3-4b-it:generateContent',
    cost: 'Th·∫•p',
    quality: 'T·ªët',
    provider: 'Google'
  },
  'gpt-4o': {
    name: 'GPT-4o',
    url: 'https://api.openai.com/v1/chat/completions',
    cost: 'Cao',
    quality: 'T·ªët nh·∫•t',
    provider: 'OpenAI'
  },
  'gpt-4o-mini': {
    name: 'GPT-4o Mini',
    url: 'https://api.openai.com/v1/chat/completions',
    cost: 'Trung b√¨nh',
    quality: 'T·ªët',
    provider: 'OpenAI'
  },
  'gpt-3.5-turbo': {
    name: 'GPT-3.5 Turbo',
    url: 'https://api.openai.com/v1/chat/completions',
    cost: 'Th·∫•p',
    quality: 'Kh√°',
    provider: 'OpenAI'
  }
};

/**
 * T·∫°o menu trong Google Sheets
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üîÑ Translation Tool')
    .addItem('D·ªãch v√πng ch·ªçn', 'translateSelectedRange')
    .addSeparator()
    .addItem('C√†i ƒë·∫∑t API Key', 'showApiKeyDialog')
    .addItem('C√†i ƒë·∫∑t Model', 'showModelDialog')
    .addItem('üîí B·∫£o m·∫≠t API Keys', 'cleanupApiKeys')
    .addItem('üîç Ki·ªÉm tra b·∫£o m·∫≠t', 'checkApiKeySecurity')
    .addToUi();
}

/**
 * Hi·ªÉn th·ªã dialog ƒë·ªÉ nh·∫≠p API Key
 */
function showApiKeyDialog() {
  const html = HtmlService.createHtmlOutput(`
    <style>
      body { font-family: Arial, sans-serif; padding: 20px; }
      .input-group { margin-bottom: 15px; }
      label { display: block; margin-bottom: 5px; font-weight: bold; }
      input[type="text"] { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
      button { background: #4285f4; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
      button:hover { background: #3367d6; }
      .api-section { 
        border: 1px solid #e1e5e9; 
        border-radius: 8px; 
        padding: 15px; 
        margin-bottom: 15px; 
      }
      .api-title { font-weight: bold; font-size: 16px; margin-bottom: 10px; }
      .api-description { color: #666; font-size: 14px; margin-bottom: 10px; }
    </style>
    <h3>üîë C√†i ƒë·∫∑t API Keys</h3>
    
    <div class="api-section">
      <div class="api-title">ü§ñ Google Gemini API</div>
      <div class="api-description">S·ª≠ d·ª•ng cho Gemini v√† Gemma models</div>
      <div class="input-group">
        <label for="geminiApiKey">Gemini API Key:</label>
        <input type="text" id="geminiApiKey" placeholder="Nh·∫≠p Gemini API Key c·ªßa b·∫°n">
      </div>
    </div>
    
    <div class="api-section">
      <div class="api-title">üß† OpenAI GPT API</div>
      <div class="api-description">S·ª≠ d·ª•ng cho GPT models</div>
      <div class="input-group">
        <label for="openaiApiKey">OpenAI API Key:</label>
        <input type="text" id="openaiApiKey" placeholder="Nh·∫≠p OpenAI API Key c·ªßa b·∫°n">
      </div>
    </div>
    
    <button onclick="saveApiKeys()">L∆∞u API Keys</button>
    <script>
      function saveApiKeys() {
        const geminiApiKey = document.getElementById('geminiApiKey').value;
        const openaiApiKey = document.getElementById('openaiApiKey').value;
        
        if (geminiApiKey.trim() === '' && openaiApiKey.trim() === '') {
          alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt API Key!');
          return;
        }
        
        google.script.run
          .withSuccessHandler(function() {
            alert('API Keys ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
            google.script.host.close();
          })
          .withFailureHandler(function(error) {
            alert('L·ªói: ' + error);
          })
          .saveApiKeys(geminiApiKey, openaiApiKey);
      }
    </script>
  `)
    .setWidth(500)
    .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'C√†i ƒë·∫∑t API Keys');
}

/**
 * Hi·ªÉn th·ªã dialog ƒë·ªÉ ch·ªçn model
 */
function showModelDialog() {
  const currentModel = getSelectedModel();
  const html = HtmlService.createHtmlOutput(`
    <style>
      body { font-family: Arial, sans-serif; padding: 20px; }
      .model-option { 
        border: 2px solid #e1e5e9; 
        border-radius: 8px; 
        padding: 15px; 
        margin-bottom: 10px; 
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .model-option:hover { border-color: #4285f4; background: #f8f9fa; }
      .model-option.selected { border-color: #4285f4; background: #e8f4fd; }
      .model-name { font-weight: bold; font-size: 16px; margin-bottom: 5px; }
      .model-details { color: #666; font-size: 14px; }
      .cost-badge { 
        display: inline-block; 
        padding: 2px 8px; 
        border-radius: 12px; 
        font-size: 12px; 
        font-weight: bold;
        margin-left: 10px;
      }
      .cost-high { background: #ffebee; color: #c62828; }
      .cost-medium { background: #fff3e0; color: #ef6c00; }
      .cost-low { background: #e8f5e8; color: #2e7d32; }
      .provider-badge {
        display: inline-block;
        padding: 2px 6px;
        border-radius: 10px;
        font-size: 10px;
        font-weight: bold;
        margin-left: 5px;
      }
      .provider-google { background: #e3f2fd; color: #1976d2; }
      .provider-openai { background: #f3e5f5; color: #7b1fa2; }
      button { background: #4285f4; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-top: 15px; }
      button:hover { background: #3367d6; }
    </style>
    <h3>ü§ñ Ch·ªçn Model AI</h3>
    <p>Ch·ªçn model ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch:</p>
    
    <div class="model-option ${currentModel === 'gpt-4o' ? 'selected' : ''}" onclick="selectModel('gpt-4o')">
      <div class="model-name">
        GPT-4o
        <span class="cost-badge cost-high">Chi ph√≠ cao</span>
        <span class="provider-badge provider-openai">OpenAI</span>
      </div>
      <div class="model-details">Ch·∫•t l∆∞·ª£ng d·ªãch t·ªët nh·∫•t, ph√π h·ª£p cho n·ªôi dung quan tr·ªçng</div>
    </div>
    
    <div class="model-option ${currentModel === 'gpt-4o-mini' ? 'selected' : ''}" onclick="selectModel('gpt-4o-mini')">
      <div class="model-name">
        GPT-4o Mini
        <span class="cost-badge cost-medium">Chi ph√≠ trung b√¨nh</span>
        <span class="provider-badge provider-openai">OpenAI</span>
      </div>
      <div class="model-details">C√¢n b·∫±ng gi·ªØa ch·∫•t l∆∞·ª£ng v√† chi ph√≠</div>
    </div>
    
    <div class="model-option ${currentModel === 'gpt-3.5-turbo' ? 'selected' : ''}" onclick="selectModel('gpt-3.5-turbo')">
      <div class="model-name">
        GPT-3.5 Turbo
        <span class="cost-badge cost-low">Ti·∫øt ki·ªám</span>
        <span class="provider-badge provider-openai">OpenAI</span>
      </div>
      <div class="model-details">Chi ph√≠ th·∫•p, ph√π h·ª£p cho d·ªãch thu·∫≠t th∆∞·ªùng xuy√™n</div>
    </div>
    
    <div class="model-option ${currentModel === 'gemini-2.0-flash-lite' ? 'selected' : ''}" onclick="selectModel('gemini-2.0-flash-lite')">
      <div class="model-name">
        Gemini 2.0 Flash Lite
        <span class="cost-badge cost-high">Chi ph√≠ cao</span>
        <span class="provider-badge provider-google">Google</span>
      </div>
      <div class="model-details">Ch·∫•t l∆∞·ª£ng d·ªãch t·ªët nh·∫•t t·ª´ Google</div>
    </div>
    
    <div class="model-option ${currentModel === 'gemma-3-4b-it' ? 'selected' : ''}" onclick="selectModel('gemma-3-4b-it')">
      <div class="model-name">
        Gemma 3 4B IT
        <span class="cost-badge cost-low">Ti·∫øt ki·ªám</span>
        <span class="provider-badge provider-google">Google</span>
      </div>
      <div class="model-details">Chi ph√≠ th·∫•p, ch·∫•t l∆∞·ª£ng t·ªët t·ª´ Google</div>
    </div>
    
    <button onclick="saveModel()">L∆∞u l·ª±a ch·ªçn</button>
    
    <script>
      let selectedModel = '${currentModel}';
      
      function selectModel(model) {
        document.querySelectorAll('.model-option').forEach(option => {
          option.classList.remove('selected');
        });
        event.currentTarget.classList.add('selected');
        selectedModel = model;
      }
      
      function saveModel() {
        google.script.run
          .withSuccessHandler(function() {
            alert('Model ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
            google.script.host.close();
          })
          .withFailureHandler(function(error) {
            alert('L·ªói: ' + error);
          })
          .saveSelectedModel(selectedModel);
      }
    </script>
  `)
    .setWidth(600)
    .setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Ch·ªçn Model AI');
}

/**
 * L∆∞u API Keys v√†o Properties
 */
function saveApiKeys(geminiApiKey, openaiApiKey) {
  if (geminiApiKey && geminiApiKey.trim() !== '') {
    PropertiesService.getUserProperties().setProperty('GEMINI_API_KEY', geminiApiKey);
  }
  if (openaiApiKey && openaiApiKey.trim() !== '') {
    PropertiesService.getUserProperties().setProperty('OPENAI_API_KEY', openaiApiKey);
  }
}

/**
 * L∆∞u API Key v√†o Properties (backward compatibility)
 */
function saveApiKey(apiKey) {
  PropertiesService.getUserProperties().setProperty('GEMINI_API_KEY', apiKey);
}

/**
 * L∆∞u model ƒë∆∞·ª£c ch·ªçn v√†o Properties
 */
function saveSelectedModel(model) {
  PropertiesService.getUserProperties().setProperty('SELECTED_MODEL', model);
}

/**
 * L·∫•y API Key t·ª´ Properties
 */
function getApiKey() {
  const selectedModel = getSelectedModel();
  const modelInfo = AVAILABLE_MODELS[selectedModel];
  
  if (modelInfo.provider === 'OpenAI') {
    const apiKey = PropertiesService.getUserProperties().getProperty('OPENAI_API_KEY');
    if (!apiKey) {
      throw new Error('OpenAI API Key ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng s·ª≠ d·ª•ng menu "C√†i ƒë·∫∑t API Key"');
    }
    return apiKey;
  } else {
    // Google models
    const apiKey = PropertiesService.getUserProperties().getProperty('GEMINI_API_KEY');
    if (!apiKey) {
      throw new Error('Gemini API Key ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng s·ª≠ d·ª•ng menu "C√†i ƒë·∫∑t API Key"');
    }
    return apiKey;
  }
}

/**
 * L·∫•y model ƒë∆∞·ª£c ch·ªçn t·ª´ Properties
 */
function getSelectedModel() {
  const model = PropertiesService.getUserProperties().getProperty('SELECTED_MODEL');
  return model || 'gemma-3-4b-it';
}

/**
 * D·ªçn d·∫πp v√† b·∫£o m·∫≠t API Keys - Di chuy·ªÉn t·ª´ Script Properties sang User Properties
 */
function cleanupApiKeys() {
  console.log('üîí B·∫Øt ƒë·∫ßu d·ªçn d·∫πp API Keys ƒë·ªÉ b·∫£o m·∫≠t...');
  
  // Ki·ªÉm tra xem c√≥ API keys c≈© trong Script Properties kh√¥ng
  const scriptGeminiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');
  const scriptOpenaiKey = PropertiesService.getScriptProperties().getProperty('OPENAI_API_KEY');
  const scriptModel = PropertiesService.getScriptProperties().getProperty('SELECTED_MODEL');
  
  // Ki·ªÉm tra User Properties hi·ªán t·∫°i
  const userGeminiKey = PropertiesService.getUserProperties().getProperty('GEMINI_API_KEY');
  const userOpenaiKey = PropertiesService.getUserProperties().getProperty('OPENAI_API_KEY');
  const userModel = PropertiesService.getUserProperties().getProperty('SELECTED_MODEL');
  
  let migrated = false;
  
  // Di chuy·ªÉn API keys t·ª´ Script sang User Properties n·∫øu c·∫ßn
  if (scriptGeminiKey && !userGeminiKey) {
    PropertiesService.getUserProperties().setProperty('GEMINI_API_KEY', scriptGeminiKey);
    console.log('‚úÖ ƒê√£ di chuy·ªÉn Gemini API Key sang User Properties');
    migrated = true;
  }
  
  if (scriptOpenaiKey && !userOpenaiKey) {
    PropertiesService.getUserProperties().setProperty('OPENAI_API_KEY', scriptOpenaiKey);
    console.log('‚úÖ ƒê√£ di chuy·ªÉn OpenAI API Key sang User Properties');
    migrated = true;
  }
  
  if (scriptModel && !userModel) {
    PropertiesService.getUserProperties().setProperty('SELECTED_MODEL', scriptModel);
    console.log('‚úÖ ƒê√£ di chuy·ªÉn Model selection sang User Properties');
    migrated = true;
  }
  
  // X√≥a API keys c≈© kh·ªèi Script Properties ƒë·ªÉ b·∫£o m·∫≠t
  if (scriptGeminiKey || scriptOpenaiKey || scriptModel) {
    PropertiesService.getScriptProperties().deleteProperty('GEMINI_API_KEY');
    PropertiesService.getScriptProperties().deleteProperty('OPENAI_API_KEY');
    PropertiesService.getScriptProperties().deleteProperty('SELECTED_MODEL');
    console.log('üóëÔ∏è ƒê√£ x√≥a API Keys c≈© kh·ªèi Script Properties');
  }
  
  if (migrated) {
    console.log('üéâ Ho√†n th√†nh di chuy·ªÉn API Keys sang User Properties');
    console.log('üîí API Keys c·ªßa b·∫°n gi·ªù ƒë√¢y ƒë∆∞·ª£c b·∫£o v·ªá v√† ch·ªâ b·∫°n m·ªõi c√≥ th·ªÉ truy c·∫≠p!');
  } else {
    console.log('‚ÑπÔ∏è Kh√¥ng c√≥ API Keys c≈© c·∫ßn di chuy·ªÉn');
  }
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
  console.log('\nüìä Tr·∫°ng th√°i API Keys hi·ªán t·∫°i:');
  console.log(`Gemini API Key: ${userGeminiKey ? '‚úÖ ƒê√£ c√†i ƒë·∫∑t' : '‚ùå Ch∆∞a c√†i ƒë·∫∑t'}`);
  console.log(`OpenAI API Key: ${userOpenaiKey ? '‚úÖ ƒê√£ c√†i ƒë·∫∑t' : '‚ùå Ch∆∞a c√†i ƒë·∫∑t'}`);
  console.log(`Selected Model: ${userModel || 'gemma-3-4b-it'}`);
}

/**
 * Ki·ªÉm tra b·∫£o m·∫≠t API Keys
 */
function checkApiKeySecurity() {
  console.log('üîí === KI·ªÇM TRA B·∫¢O M·∫¨T API KEYS ===');
  
  // Ki·ªÉm tra Script Properties (kh√¥ng an to√†n)
  const scriptGeminiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');
  const scriptOpenaiKey = PropertiesService.getScriptProperties().getProperty('OPENAI_API_KEY');
  
  // Ki·ªÉm tra User Properties (an to√†n)
  const userGeminiKey = PropertiesService.getUserProperties().getProperty('GEMINI_API_KEY');
  const userOpenaiKey = PropertiesService.getUserProperties().getProperty('OPENAI_API_KEY');
  
  let securityIssues = [];
  let securityGood = [];
  
  // Ki·ªÉm tra Gemini API Key
  if (scriptGeminiKey) {
    securityIssues.push('‚ùå Gemini API Key ƒëang l∆∞u trong Script Properties (KH√îNG AN TO√ÄN)');
  } else if (userGeminiKey) {
    securityGood.push('‚úÖ Gemini API Key ƒë∆∞·ª£c l∆∞u trong User Properties (AN TO√ÄN)');
  } else {
    securityGood.push('‚ÑπÔ∏è Ch∆∞a c√†i ƒë·∫∑t Gemini API Key');
  }
  
  // Ki·ªÉm tra OpenAI API Key
  if (scriptOpenaiKey) {
    securityIssues.push('‚ùå OpenAI API Key ƒëang l∆∞u trong Script Properties (KH√îNG AN TO√ÄN)');
  } else if (userOpenaiKey) {
    securityGood.push('‚úÖ OpenAI API Key ƒë∆∞·ª£c l∆∞u trong User Properties (AN TO√ÄN)');
  } else {
    securityGood.push('‚ÑπÔ∏è Ch∆∞a c√†i ƒë·∫∑t OpenAI API Key');
  }
  
  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  if (securityIssues.length > 0) {
    console.log('‚ö†Ô∏è PH√ÅT HI·ªÜN V·∫§N ƒê·ªÄ B·∫¢O M·∫¨T:');
    securityIssues.forEach(issue => console.log(issue));
    console.log('\nüí° GI·∫¢I PH√ÅP: S·ª≠ d·ª•ng menu "üîí B·∫£o m·∫≠t API Keys" ƒë·ªÉ di chuy·ªÉn API Keys sang User Properties');
  } else {
    console.log('üéâ T·∫§T C·∫¢ API KEYS ƒê√É ƒê∆Ø·ª¢C B·∫¢O V·ªÜ!');
  }
  
  securityGood.forEach(good => console.log(good));
  
  // T√≥m t·∫Øt
  console.log('\nüìä T√ìM T·∫ÆT B·∫¢O M·∫¨T:');
  console.log(`Script Properties (kh√¥ng an to√†n): ${scriptGeminiKey || scriptOpenaiKey ? '‚ùå C√≥ API Keys' : '‚úÖ Kh√¥ng c√≥ API Keys'}`);
  console.log(`User Properties (an to√†n): ${userGeminiKey || userOpenaiKey ? '‚úÖ C√≥ API Keys' : '‚ÑπÔ∏è Ch∆∞a c√≥ API Keys'}`);
  
  if (securityIssues.length === 0) {
    console.log('üîí API Keys c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá ho√†n to√†n!');
    console.log('üë• Ng∆∞·ªùi kh√°c kh√¥ng th·ªÉ truy c·∫≠p API Keys c·ªßa b·∫°n.');
  } else {
    console.log('üö® C·∫ßn th·ª±c hi·ªán b·∫£o m·∫≠t ngay!');
  }
}

/**
 * L·∫•y API URL d·ª±a tr√™n model ƒë∆∞·ª£c ch·ªçn
 */
function getApiUrl() {
  const model = getSelectedModel();
  return AVAILABLE_MODELS[model]?.url || AVAILABLE_MODELS['gemma-3-4b-it'].url;
}

/**
 * D·ªãch text s·ª≠ d·ª•ng Gemini/Gemma/GPT API v·ªõi retry logic
 */
function translateText(text, targetLanguage = 'Vietnamese') {
  if (!text || text.toString().trim() === '') {
    return '';
  }
  
  const apiKey = getApiKey();
  const apiUrl = getApiUrl();
  const selectedModel = getSelectedModel();
  const modelInfo = AVAILABLE_MODELS[selectedModel];
  
  let prompt;
  let payload;
  let options;
  
  if (modelInfo.provider === 'OpenAI') {
    // OpenAI GPT models
    prompt = `Translate the following text to ${targetLanguage}. Return only the translation without any additional text or formatting: "${text}"`;
    
    payload = {
      model: selectedModel,
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1000
    };
    
    options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
  } else {
    // Google Gemini/Gemma models
    if (selectedModel === 'gemma-3-4b-it') {
      prompt = `Translate this text to ${targetLanguage}. Return only the translation: "${text}"`;
    } else {
      prompt = `D·ªãch ƒëo·∫°n text sau sang ti·∫øng ${targetLanguage}. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch, kh√¥ng th√™m gi·∫£i th√≠ch hay d·∫•u ngo·∫∑c k√©p: ${text}`;
    }

    payload = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    };

    options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': apiKey
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
  }

  // Retry logic - th·ª≠ t·ªëi ƒëa 3 l·∫ßn
  const maxRetries = 3;
  let lastError = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = UrlFetchApp.fetch(apiUrl, options);
      const responseCode = response.getResponseCode();
      const responseText = response.getContentText();
      
      // Ki·ªÉm tra HTTP status code
      if (responseCode !== 200) {
        throw new Error(`HTTP ${responseCode}: ${responseText}`);
      }
      
      const data = JSON.parse(responseText);
      let translatedText = '';
      
      if (modelInfo.provider === 'OpenAI') {
        // Parse OpenAI response
        if (data.choices && data.choices[0] && data.choices[0].message) {
          translatedText = data.choices[0].message.content.trim();
        } else {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ OpenAI API');
        }
      } else {
        // Parse Google response
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
          translatedText = data.candidates[0].content.parts[0].text.trim();
        } else {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Google API');
        }
      }
      
      // Ki·ªÉm tra k·∫øt qu·∫£ d·ªãch c√≥ h·ª£p l·ªá kh√¥ng
      if (translatedText && translatedText.length > 0) {
        return translatedText;
      } else {
        throw new Error('K·∫øt qu·∫£ d·ªãch r·ªóng');
      }
      
    } catch (error) {
      lastError = error;
      console.log(`L·∫ßn th·ª≠ ${attempt}/${maxRetries} th·∫•t b·∫°i: ${error.message}`);
      
      // N·∫øu c√≤n l·∫ßn th·ª≠, ch·ªù m·ªôt l√∫c r·ªìi th·ª≠ l·∫°i
      if (attempt < maxRetries) {
        const delay = selectedModel === 'gemma-3-4b-it' ? 1000 : 1500;
        console.log(`Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        Utilities.sleep(delay);
      }
    }
  }
  
  // N·∫øu t·∫•t c·∫£ l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
  console.error(`D·ªãch th·∫•t b·∫°i sau ${maxRetries} l·∫ßn th·ª≠: ${lastError.message}`);
  throw new Error(`D·ªãch th·∫•t b·∫°i: ${lastError.message}`);
}

/**
 * D·ªãch chunk text (nhi·ªÅu text c√πng l√∫c) v·ªõi separator "|||"
 */
function translateTextChunk(texts, targetLanguage = 'Vietnamese') {
  if (!texts || texts.length === 0) {
    return [];
  }
  
  const apiKey = getApiKey();
  const apiUrl = getApiUrl();
  const selectedModel = getSelectedModel();
  const modelInfo = AVAILABLE_MODELS[selectedModel];
  
  // T·∫°o prompt cho chunk
  let prompt;
  if (modelInfo.provider === 'OpenAI') {
    // OpenAI GPT models - s·ª≠ d·ª•ng "|||" separator
    prompt = `Translate the following texts to ${targetLanguage}. Each text may contain multiple lines or paragraphs - treat each numbered item as ONE complete text. Return only the translations, separated by "|||":\n\n`;
    for (let i = 0; i < texts.length; i++) {
      prompt += `${i + 1}. ${texts[i]}\n\n`;
    }
  } else {
    // Google models - s·ª≠ d·ª•ng "|||" separator
    if (selectedModel === 'gemma-3-4b-it') {
      prompt = `Translate the following texts to ${targetLanguage}. Each text may contain multiple lines - treat each numbered item as ONE complete text. Return only the translations, separated by "|||":\n\n`;
    } else {
      prompt = `D·ªãch c√°c ƒëo·∫°n text sau sang ti·∫øng ${targetLanguage}. M·ªói ƒëo·∫°n text c√≥ th·ªÉ c√≥ nhi·ªÅu d√≤ng - coi m·ªói m·ª•c ƒë√°nh s·ªë l√† M·ªòT vƒÉn b·∫£n ho√†n ch·ªânh. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch, ph√¢n c√°ch b·∫±ng "|||":\n\n`;
    }
    
    for (let i = 0; i < texts.length; i++) {
      prompt += `${i + 1}. ${texts[i]}\n\n`;
    }
  }
  
  let payload;
  let options;
  
  if (modelInfo.provider === 'OpenAI') {
    payload = {
      model: selectedModel,
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 2000
    };
    
    options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
  } else {
    payload = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    };

    options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': apiKey
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
  }

  // Retry logic - th·ª≠ t·ªëi ƒëa 3 l·∫ßn
  const maxRetries = 3;
  let lastError = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = UrlFetchApp.fetch(apiUrl, options);
      const responseCode = response.getResponseCode();
      const responseText = response.getContentText();
      
      // Ki·ªÉm tra HTTP status code
      if (responseCode !== 200) {
        throw new Error(`HTTP ${responseCode}: ${responseText}`);
      }
      
      const data = JSON.parse(responseText);
      let translatedText = '';
      
      if (modelInfo.provider === 'OpenAI') {
        // Parse OpenAI response
        if (data.choices && data.choices[0] && data.choices[0].message) {
          translatedText = data.choices[0].message.content.trim();
        } else {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ OpenAI API');
        }
      } else {
        // Parse Google response
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
          translatedText = data.candidates[0].content.parts[0].text.trim();
        } else {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Google API');
        }
      }
      
      // T√°ch k·∫øt qu·∫£ b·∫±ng "|||" - t·∫•t c·∫£ models ƒë·ªÅu s·ª≠ d·ª•ng c√πng separator
      const translatedParts = translatedText.split('|||').map(part => part.trim()).filter(part => part !== '');
      
      // Ki·ªÉm tra s·ªë l∆∞·ª£ng k·∫øt qu·∫£
      if (translatedParts.length === 0) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ d·ªãch h·ª£p l·ªá');
      }
      
      console.log(`‚úÖ Chunk d·ªãch th√†nh c√¥ng: ${texts.length} text -> ${translatedParts.length} k·∫øt qu·∫£`);
      
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p s·ªë k·∫øt qu·∫£ kh√¥ng kh·ªõp v·ªõi s·ªë input
      if (translatedParts.length !== texts.length) {
        console.log(`‚ö†Ô∏è C·∫£nh b√°o: S·ªë k·∫øt qu·∫£ (${translatedParts.length}) kh√¥ng kh·ªõp v·ªõi s·ªë input (${texts.length})`);
        
        // N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£ h∆°n input, gh√©p l·∫°i
        if (translatedParts.length > texts.length) {
          const adjustedResults = [];
          let currentIndex = 0;
          
          for (let i = 0; i < texts.length; i++) {
            if (currentIndex < translatedParts.length) {
              // Ki·ªÉm tra xem text g·ªëc c√≥ xu·ªëng d√≤ng kh√¥ng
              const originalText = texts[i];
              const lineCount = (originalText.match(/\n/g) || []).length + 1;
              
              if (lineCount > 1 && currentIndex + lineCount <= translatedParts.length) {
                // Gh√©p c√°c k·∫øt qu·∫£ t∆∞∆°ng ·ª©ng v·ªõi s·ªë d√≤ng
                const combinedResult = translatedParts.slice(currentIndex, currentIndex + lineCount).join('\n');
                adjustedResults.push(combinedResult);
                currentIndex += lineCount;
              } else {
                // L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                adjustedResults.push(translatedParts[currentIndex]);
                currentIndex++;
              }
            } else {
              // Kh√¥ng ƒë·ªß k·∫øt qu·∫£, gi·ªØ nguy√™n text g·ªëc
              adjustedResults.push(texts[i]);
            }
          }
          
          console.log(`üîÑ ƒê√£ ƒëi·ªÅu ch·ªânh k·∫øt qu·∫£: ${translatedParts.length} -> ${adjustedResults.length}`);
          return adjustedResults;
        }
        
        // N·∫øu c√≥ √≠t k·∫øt qu·∫£ h∆°n input, b·ªï sung text g·ªëc
        if (translatedParts.length < texts.length) {
          const adjustedResults = [...translatedParts];
          for (let i = translatedParts.length; i < texts.length; i++) {
            adjustedResults.push(texts[i]); // Gi·ªØ nguy√™n text g·ªëc
          }
          console.log(`üîÑ ƒê√£ b·ªï sung text g·ªëc cho c√°c k·∫øt qu·∫£ thi·∫øu`);
          return adjustedResults;
        }
      }
      
      return translatedParts;
      
    } catch (error) {
      lastError = error;
      console.log(`L·∫ßn th·ª≠ ${attempt}/${maxRetries} th·∫•t b·∫°i: ${error.message}`);
      
      // N·∫øu c√≤n l·∫ßn th·ª≠, ch·ªù m·ªôt l√∫c r·ªìi th·ª≠ l·∫°i
      if (attempt < maxRetries) {
        const delay = selectedModel === 'gemma-3-4b-it' ? 2000 : 2500;
        console.log(`Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        Utilities.sleep(delay);
      }
    }
  }
  
  // N·∫øu t·∫•t c·∫£ l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
  console.error(`D·ªãch chunk th·∫•t b·∫°i sau ${maxRetries} l·∫ßn th·ª≠: ${lastError.message}`);
  throw new Error(`D·ªãch chunk th·∫•t b·∫°i: ${lastError.message}`);
}

/**
 * T·∫°o t√™n sheet d·ªãch
 */
function getTranslationSheetName(originalSheetName, targetLanguage) {
  const languageSuffix = targetLanguage.toLowerCase();
  return `${originalSheetName}_${languageSuffix}`;
}

/**
 * T·∫°o ho·∫∑c l·∫•y sheet d·ªãch
 */
function getOrCreateTranslationSheet(spreadsheet, originalSheetName, targetLanguage) {
  const translationSheetName = getTranslationSheetName(originalSheetName, targetLanguage);
  
  let translationSheet = spreadsheet.getSheetByName(translationSheetName);
  
  if (translationSheet) {
    translationSheet.clear();
  } else {
    translationSheet = spreadsheet.insertSheet(translationSheetName);
  }
  
  return translationSheet;
}

/**
 * Copy format v√† style t·ª´ sheet g·ªëc
 */
function copySheetFormat(sourceSheet, targetSheet) {
  try {
    const numCols = sourceSheet.getLastColumn();
    const numRows = sourceSheet.getLastRow();
    
    for (let col = 1; col <= numCols; col++) {
      const width = sourceSheet.getColumnWidth(col);
      targetSheet.setColumnWidth(col, width);
    }
    
    for (let row = 1; row <= numRows; row++) {
      const height = sourceSheet.getRowHeight(row);
      targetSheet.setRowHeight(row, height);
    }
    
    if (numRows > 0) {
      const headerRange = sourceSheet.getRange(1, 1, 1, numCols);
      const headerFormat = headerRange.getFontWeight();
      const headerBackground = headerRange.getBackground();
      
      const targetHeaderRange = targetSheet.getRange(1, 1, 1, numCols);
      targetHeaderRange.setFontWeight(headerFormat);
      targetHeaderRange.setBackground(headerBackground);
    }
  } catch (error) {
    console.log('Kh√¥ng th·ªÉ copy format:', error.message);
  }
}

/**
 * D·ªãch v√πng ƒë∆∞·ª£c ch·ªçn trong sheet
 */
function translateSelectedRange() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const range = sheet.getActiveRange();
  
  if (!range) {
    console.log('‚ùå Vui l√≤ng ch·ªçn m·ªôt v√πng ƒë·ªÉ d·ªãch!');
    return;
  }
  
  const selectedModel = getSelectedModel();
  const modelInfo = AVAILABLE_MODELS[selectedModel];
  
  console.log(`üîÑ B·∫Øt ƒë·∫ßu d·ªãch v√πng ƒë∆∞·ª£c ch·ªçn v·ªõi ${modelInfo.name}`);
  console.log(`üìç V√πng: ${range.getA1Notation()}`);
  
  const targetLanguage = 'Vietnamese';
  
  try {
    translateRangeInPlace(range, targetLanguage);
  } catch (error) {
    console.error('L·ªói khi d·ªãch v√πng ƒë∆∞·ª£c ch·ªçn:', error);
  }
}

/**
 * D·ªãch v√πng c·ª• th·ªÉ t·∫°i ch·ªó - Phi√™n b·∫£n t·ªëi ∆∞u v·ªõi chunk processing
 */
function translateRangeInPlace(range, targetLanguage) {
  const values = range.getValues();
  const numRows = values.length;
  const numCols = values[0].length;
  
  let translatedCount = 0;
  let errorCount = 0;
  let emptyCount = 0;
  let totalCells = numRows * numCols;
  
  const selectedModel = getSelectedModel();
  const modelInfo = AVAILABLE_MODELS[selectedModel];
  
  console.log(`üìä Ph√¢n t√≠ch v√πng ƒë∆∞·ª£c ch·ªçn`);
  console.log(`üìù T·ªïng s·ªë √¥: ${totalCells}`);
  console.log(`ü§ñ Model: ${modelInfo.name}`);
  
  // Thu th·∫≠p t·∫•t c·∫£ text c·∫ßn d·ªãch v√† v·ªã tr√≠
  const textsToTranslate = [];
  const cellPositions = [];
  
  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      const cellValue = values[row][col];
      if (cellValue && typeof cellValue === 'string' && cellValue.trim() !== '') {
        textsToTranslate.push(cellValue);
        cellPositions.push({ row, col });
      } else {
        emptyCount++;
      }
    }
  }
  
  console.log(`üìù S·ªë √¥ c√≥ n·ªôi dung c·∫ßn d·ªãch: ${textsToTranslate.length}`);
  console.log(`‚¨ú S·ªë √¥ r·ªóng: ${emptyCount}`);
  
  if (textsToTranslate.length === 0) {
    console.log(`‚ÑπÔ∏è Kh√¥ng c√≥ text n√†o c·∫ßn d·ªãch trong v√πng ƒë∆∞·ª£c ch·ªçn!`);
    return;
  }
  
  // Chia th√†nh c√°c chunk (30 √¥ m·ªói chunk)
  const CHUNK_SIZE = 30;
  const chunks = [];
  
  for (let i = 0; i < textsToTranslate.length; i += CHUNK_SIZE) {
    chunks.push(textsToTranslate.slice(i, i + CHUNK_SIZE));
  }
  
  console.log(`üì¶ Chia th√†nh ${chunks.length} chunk (${CHUNK_SIZE} text/chunk)`);
  
  // D·ªãch t·ª´ng chunk
  const allTranslatedTexts = [];
  
  for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {
    const chunk = chunks[chunkIndex];
    console.log(`\nüîÑ ƒêang x·ª≠ l√Ω chunk ${chunkIndex + 1}/${chunks.length} (${chunk.length} text)`);
    
    try {
      // S·ª≠ d·ª•ng function translateTextChunk m·ªõi
      const translatedParts = translateTextChunk(chunk, targetLanguage);
      
      console.log(`‚úÖ Chunk ${chunkIndex + 1} ho√†n th√†nh`);
      console.log(`üìù S·ªë text g·ªëc: ${chunk.length}`);
      console.log(`üìù S·ªë text d·ªãch: ${translatedParts.length}`);
      
      // Map k·∫øt qu·∫£ v·ªÅ ƒë√∫ng v·ªã tr√≠
      for (let i = 0; i < chunk.length; i++) {
        const translatedText = translatedParts[i] || chunk[i]; // Gi·ªØ nguy√™n text g·ªëc n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        allTranslatedTexts.push(translatedText);
        translatedCount++;
      }
      
      // Delay gi·ªØa c√°c chunk
      const delay = selectedModel === 'gemma-3-4b-it' ? 2000 : 2500;
      if (chunkIndex < chunks.length - 1) {
        console.log(`‚è≥ Ch·ªù ${delay}ms tr∆∞·ªõc chunk ti·∫øp theo...`);
        Utilities.sleep(delay);
      }
      
    } catch (error) {
      console.error(`‚ùå L·ªói chunk ${chunkIndex + 1}:`, error);
      errorCount += chunk.length;
      
      // Th√™m text g·ªëc v√†o k·∫øt qu·∫£ n·∫øu l·ªói
      allTranslatedTexts.push(...chunk);
    }
  }
  
  // C·∫≠p nh·∫≠t v√πng v·ªõi k·∫øt qu·∫£ d·ªãch
  console.log(`\nüìù ƒêang c·∫≠p nh·∫≠t v√πng...`);
  
  const newValues = [];
  let textIndex = 0;
  
  for (let row = 0; row < numRows; row++) {
    const newRow = [];
    for (let col = 0; col < numCols; col++) {
      const cellValue = values[row][col];
      if (cellValue && typeof cellValue === 'string' && cellValue.trim() !== '') {
        if (textIndex < allTranslatedTexts.length) {
          const translatedText = allTranslatedTexts[textIndex];
          newRow.push(translatedText);
          console.log(`üìù C·∫≠p nh·∫≠t √¥ ${row + 1},${col + 1}: "${cellValue}" -> "${translatedText}"`);
          textIndex++;
        } else {
          newRow.push(cellValue);
        }
      } else {
        newRow.push(cellValue);
      }
    }
    newValues.push(newRow);
  }
  
  // C·∫≠p nh·∫≠t v√πng
  range.setValues(newValues);
  
  const finalSuccessRate = textsToTranslate.length > 0 ? Math.round((translatedCount / textsToTranslate.length) * 100) : 0;
  
  console.log(`\nüéâ === K·∫æT QU·∫¢ D·ªäCH V√ôNG (T·ªêI ∆ØU) ===`);
  console.log(`üìç V√πng: ${range.getA1Notation()}`);
  console.log(`üìä T·ªïng s·ªë √¥: ${totalCells}`);
  console.log(`üìù S·ªë √¥ c√≥ n·ªôi dung: ${textsToTranslate.length}`);
  console.log(`‚úÖ S·ªë √¥ ƒë√£ d·ªãch: ${translatedCount}`);
  console.log(`‚ùå S·ªë √¥ l·ªói: ${errorCount}`);
  console.log(`‚¨ú S·ªë √¥ r·ªóng: ${emptyCount}`);
  console.log(`üì¶ S·ªë chunk ƒë√£ x·ª≠ l√Ω: ${chunks.length}`);
  console.log(`üìà T·ª∑ l·ªá th√†nh c√¥ng: ${finalSuccessRate}%`);
  console.log(`üöÄ Gi·∫£m API calls: ${Math.round(((textsToTranslate.length - chunks.length) / textsToTranslate.length) * 100)}%`);
  
  if (finalSuccessRate < 80) {
    console.log(`‚ö†Ô∏è C·∫£nh b√°o: T·ª∑ l·ªá th√†nh c√¥ng th·∫•p (${finalSuccessRate}%). C√≥ th·ªÉ do:`);
    console.log(`   - Rate limit API`);
    console.log(`   - Quota exceeded`);
    console.log(`   - Network issues`);
    console.log(`   - API key kh√¥ng h·ª£p l·ªá`);
  } else {
    console.log(`üéØ T·ª∑ l·ªá th√†nh c√¥ng t·ªët! (${finalSuccessRate}%)`);
  }
}